import React, { useState, useEffect } from 'react';
import {
  User, Bell, MessageCircle, ChevronDown, Home, Calendar,
  FileText, Heart, Settings, LogOut, Menu, X, Eye, EyeOff,
  Phone, Mail, Lock, ArrowLeft, TrendingUp, BarChart3
} from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

const PatientPortal = () => {
  const [currentPage, setCurrentPage] = useState('login');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(null);
  const [showPassword, setShowPassword] = useState(false);
  const [loginMethod, setLoginMethod] = useState('username');
  const [heartRateView, setHeartRateView] = useState('chart');

  // Sample heart rate data
  const heartRateData = [
    { date: '01/01', bpm: 72, time: '08:00' },
    { date: '01/02', bpm: 68, time: '08:15' },
    { date: '01/03', bpm: 75, time: '07:45' },
    { date: '01/04', bpm: 70, time: '08:30' },
    { date: '01/05', bpm: 73, time: '08:00' },
    { date: '01/06', bpm: 69, time: '08:20' },
    { date: '01/07', bpm: 71, time: '07:55' }
  ];

  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    dateOfBirth: '',
    password: '',
    confirmPassword: '',
    username: '',
    mobile: ''
  });

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleLogin = (e) => {
    e.preventDefault();
    setIsLoggedIn(true);
    setCurrentPage('dashboard');
  };

  const handleRegister = (e) => {
    e.preventDefault();
    setCurrentPage('login');
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setCurrentPage('login');
    setDropdownOpen(null);
  };

  const navigationItems = [
    { id: 'dashboard', icon: Home, label: 'Dashboard', subItems: [] },
    {
      id: 'appointments',
      icon: Calendar,
      label: 'Appointments',
      subItems: ['Schedule', 'History', 'Upcoming']
    },
    {
      id: 'records',
      icon: FileText,
      label: 'Medical Records',
      subItems: ['Lab Results', 'Prescriptions', 'Reports']
    },
    {
      id: 'health',
      icon: Heart,
      label: 'Health Tracking',
      subItems: ['Heart Rate', 'Blood Pressure', 'Weight']
    },
    {
      id: 'settings',
      icon: Settings,
      label: 'Settings',
      subItems: ['Profile', 'Privacy', 'Notifications']
    }
  ];

  // Login Page Component
  const LoginPage = () => (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl w-full max-w-md p-8">
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
            <Heart className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-2xl font-bold text-gray-900">Patient Portal</h1>
          <p className="text-gray-600 mt-2">Sign in to access your health dashboard</p>
        </div>

        <div className="flex mb-6 bg-gray-100 rounded-lg p-1">
          <button
            onClick={() => setLoginMethod('username')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${loginMethod === 'username'
              ? 'bg-white text-blue-600 shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
              }`}
          >
            <User className="w-4 h-4 inline mr-2" />
            Username
          </button>
          <button
            onClick={() => setLoginMethod('mobile')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${loginMethod === 'mobile'
              ? 'bg-white text-blue-600 shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
              }`}
          >
            <Phone className="w-4 h-4 inline mr-2" />
            Mobile
          </button>
        </div>

        <form onSubmit={handleLogin} className="space-y-4">
          {loginMethod === 'username' ? (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Username</label>
              <input
                type="text"
                name="username"
                value={formData.username}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter your username"
                required
              />
            </div>
          ) : (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Mobile Number</label>
              <input
                type="tel"
                name="mobile"
                value={formData.mobile}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter your mobile number"
                required
              />
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent pr-12"
                placeholder="Enter your password"
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
              >
                {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
              </button>
            </div>
          </div>

          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
          >
            Sign In
          </button>
        </form>

        <div className="text-center mt-6">
          <button
            onClick={() => setCurrentPage('forgot-password')}
            className="text-blue-600 hover:text-blue-700 text-sm font-medium"
          >
            Forgot your password?
          </button>
        </div>

        <div className="text-center mt-4 pt-4 border-t border-gray-200">
          <span className="text-gray-600 text-sm">Don't have an account? </span>
          <button
            onClick={() => setCurrentPage('register')}
            className="text-blue-600 hover:text-blue-700 text-sm font-medium"
          >
            Sign up
          </button>
        </div>
      </div>
    </div>
  );

  // Registration Page Component
  const RegisterPage = () => (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl w-full max-w-lg p-8">
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
            <Heart className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-2xl font-bold text-gray-900">Create Account</h1>
          <p className="text-gray-600 mt-2">Join our patient portal today</p>
        </div>

        <form onSubmit={handleRegister} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">First Name</label>
              <input
                type="text"
                name="firstName"
                value={formData.firstName}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="First name"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
              <input
                type="text"
                name="lastName"
                value={formData.lastName}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Last name"
                required
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter your email"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Phone Number</label>
            <input
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handleInputChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter your phone number"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Date of Birth</label>
            <input
              type="date"
              name="dateOfBirth"
              value={formData.dateOfBirth}
              onChange={handleInputChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Create a password"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Confirm Password</label>
            <input
              type="password"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleInputChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Confirm your password"
              required
            />
          </div>

          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
          >
            Create Account
          </button>
        </form>

        <div className="text-center mt-6 pt-4 border-t border-gray-200">
          <span className="text-gray-600 text-sm">Already have an account? </span>
          <button
            onClick={() => setCurrentPage('login')}
            className="text-blue-600 hover:text-blue-700 text-sm font-medium"
          >
            Sign in
          </button>
        </div>
      </div>
    </div>
  );

  // Forgot Password Page Component
  const ForgotPasswordPage = () => (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl w-full max-w-md p-8">
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
            <Lock className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-2xl font-bold text-gray-900">Reset Password</h1>
          <p className="text-gray-600 mt-2">Enter your email to receive reset instructions</p>
        </div>

        <form className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
            <input
              type="email"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter your email"
              required
            />
          </div>

          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
          >
            Send Reset Link
          </button>
        </form>

        <div className="text-center mt-6">
          <button
            onClick={() => setCurrentPage('login')}
            className="text-blue-600 hover:text-blue-700 text-sm font-medium flex items-center justify-center"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Sign In
          </button>
        </div>
      </div>
    </div>
  );

  // Header Component
  const Header = () => (
    <header className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <button
            onClick={() => setSidebarOpen(!sidebarOpen)}
            className="lg:hidden mr-4 p-2 rounded-lg hover:bg-gray-100"
          >
            <Menu className="w-5 h-5" />
          </button>
          <h1 className="text-xl font-semibold text-gray-900">Patient Portal</h1>
        </div>

        <div className="flex items-center space-x-4">
          {/* Profile Dropdown */}
          <div className="relative">
            <button
              onClick={() => setDropdownOpen(dropdownOpen === 'profile' ? null : 'profile')}
              className="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100"
            >
              <User className="w-5 h-5 text-gray-600" />
              <ChevronDown className="w-4 h-4 text-gray-600" />
            </button>
            {dropdownOpen === 'profile' && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
                <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">My Profile</a>
                <a href="#" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Account Settings</a>
                <hr className="my-2" />
                <button
                  onClick={handleLogout}
                  className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100 flex items-center"
                >
                  <LogOut className="w-4 h-4 mr-2" />
                  Sign Out
                </button>
              </div>
            )}
          </div>

          {/* Messages Dropdown */}
          <div className="relative">
            <button
              onClick={() => setDropdownOpen(dropdownOpen === 'messages' ? null : 'messages')}
              className="p-2 rounded-lg hover:bg-gray-100 relative"
            >
              <MessageCircle className="w-5 h-5 text-gray-600" />
              <span className="absolute -top-1 -right-1 w-4 h-4 bg-blue-600 text-white text-xs rounded-full flex items-center justify-center">3</span>
            </button>
            {dropdownOpen === 'messages' && (
              <div className="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
                <div className="px-4 py-2 border-b border-gray-200">
                  <h3 className="font-medium text-gray-900">Messages</h3>
                </div>
                <div className="max-h-64 overflow-y-auto">
                  <div className="px-4 py-3 hover:bg-gray-50">
                    <p className="text-sm font-medium text-gray-900">Dr. Smith</p>
                    <p className="text-sm text-gray-600">Your test results are ready</p>
                    <p className="text-xs text-gray-500 mt-1">2 hours ago</p>
                  </div>
                  <div className="px-4 py-3 hover:bg-gray-50">
                    <p className="text-sm font-medium text-gray-900">Appointment Reminder</p>
                    <p className="text-sm text-gray-600">Tomorrow at 2:00 PM</p>
                    <p className="text-xs text-gray-500 mt-1">1 day ago</p>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Alerts Dropdown */}
          <div className="relative">
            <button
              onClick={() => setDropdownOpen(dropdownOpen === 'alerts' ? null : 'alerts')}
              className="p-2 rounded-lg hover:bg-gray-100 relative"
            >
              <Bell className="w-5 h-5 text-gray-600" />
              <span className="absolute -top-1 -right-1 w-4 h-4 bg-red-600 text-white text-xs rounded-full flex items-center justify-center">2</span>
            </button>
            {dropdownOpen === 'alerts' && (
              <div className="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
                <div className="px-4 py-2 border-b border-gray-200">
                  <h3 className="font-medium text-gray-900">Alerts</h3>
                </div>
                <div className="max-h-64 overflow-y-auto">
                  <div className="px-4 py-3 hover:bg-gray-50 border-l-4 border-red-400">
                    <p className="text-sm font-medium text-red-900">High Blood Pressure Alert</p>
                    <p className="text-sm text-gray-600">Reading: 160/95 mmHg</p>
                    <p className="text-xs text-gray-500 mt-1">30 minutes ago</p>
                  </div>
                  <div className="px-4 py-3 hover:bg-gray-50 border-l-4 border-yellow-400">
                    <p className="text-sm font-medium text-yellow-900">Medication Reminder</p>
                    <p className="text-sm text-gray-600">Take your evening medication</p>
                    <p className="text-xs text-gray-500 mt-1">1 hour ago</p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );

  // Sidebar Component
  const Sidebar = () => (
    <>
      {/* Overlay for mobile */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}

      {/* Sidebar */}
      <div className={`fixed left-0 top-0 h-full w-64 bg-white shadow-lg transform transition-transform duration-300 ease-in-out z-50 lg:translate-x-0 ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'
        } lg:static lg:shadow-none`}>
        <div className="p-6 border-b border-gray-200 lg:hidden">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-gray-900">Menu</h2>
            <button
              onClick={() => setSidebarOpen(false)}
              className="p-2 rounded-lg hover:bg-gray-100"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        <nav className="p-4">
          <div className="space-y-2">
            {navigationItems.map((item) => (
              <div key={item.id} className="group">
                <button
                  onClick={() => setCurrentPage(item.id)}
                  className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-all duration-200 group ${currentPage === item.id
                    ? 'bg-blue-100 text-blue-700 border-l-4 border-blue-600'
                    : 'text-gray-700 hover:bg-gray-100'
                    }`}
                >
                  <item.icon className="w-5 h-5 mr-3" />
                  <span className="font-medium">{item.label}</span>
                </button>

                {/* Submenu */}
                {item.subItems.length > 0 && (
                  <div className="ml-8 mt-2 space-y-1 opacity-0 max-h-0 overflow-hidden group-hover:opacity-100 group-hover:max-h-96 transition-all duration-300">
                    {item.subItems.map((subItem, index) => (
                      <button
                        key={index}
                        className="w-full text-left px-4 py-2 text-sm text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-md transition-colors"
                      >
                        {subItem}
                      </button>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        </nav>
      </div>
    </>
  );

  // Dashboard Component
  const Dashboard = () => (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Welcome back, John!</h1>
          <p className="text-gray-600 mt-1">Here's your health overview for today</p>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Heart Rate</p>
              <p className="text-3xl font-bold text-gray-900 mt-1">72 BPM</p>
              <p className="text-sm text-green-600 mt-1">Normal range</p>
            </div>
            <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center">
              <Heart className="w-6 h-6 text-red-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Blood Pressure</p>
              <p className="text-3xl font-bold text-gray-900 mt-1">120/80</p>
              <p className="text-sm text-green-600 mt-1">Normal</p>
            </div>
            <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
              <TrendingUp className="w-6 h-6 text-blue-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Next Appointment</p>
              <p className="text-lg font-bold text-gray-900 mt-1">Tomorrow</p>
              <p className="text-sm text-gray-600 mt-1">2:00 PM - Dr. Smith</p>
            </div>
            <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
              <Calendar className="w-6 h-6 text-green-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Messages</p>
              <p className="text-3xl font-bold text-gray-900 mt-1">3</p>
              <p className="text-sm text-blue-600 mt-1">Unread</p>
            </div>
            <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
              <MessageCircle className="w-6 h-6 text-purple-600" />
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Lab Results</h3>
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div>
                <p className="font-medium text-gray-900">Blood Glucose</p>
                <p className="text-sm text-gray-600">Fasting</p>
              </div>
              <div className="text-right">
                <p className="font-bold text-gray-900">95 mg/dL</p>
                <p className="text-sm text-green-600">Normal</p>
              </div>
            </div>
            <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div>
                <p className="font-medium text-gray-900">Cholesterol</p>
                <p className="text-sm text-gray-600">Total</p>
              </div>
              <div className="text-right">
                <p className="font-bold text-gray-900">180 mg/dL</p>
                <p className="text-sm text-yellow-600">Borderline</p>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Heart Rate Trend</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={heartRateData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="bpm" stroke="#3B82F6" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
    </div>
  );

  // Health Tracking Component
  const HealthTracking = () => {
    const [selectedMetric, setSelectedMetric] = useState('heartRate');
    const [newReading, setNewReading] = useState({
      heartRate: '',
      bloodPressureSystolic: '',
      bloodPressureDiastolic: '',
      weight: '',
      temperature: '',
      date: new Date().toISOString().split('T')[0],
      time: new Date().toTimeString().slice(0, 5)
    });

    // Sample data for different metrics
    const bloodPressureData = [
      { date: '01/01', systolic: 120, diastolic: 80 },
      { date: '01/02', systolic: 118, diastolic: 78 },
      { date: '01/03', systolic: 122, diastolic: 82 },
      { date: '01/04', systolic: 119, diastolic: 79 },
      { date: '01/05', systolic: 121, diastolic: 81 },
      { date: '01/06', systolic: 117, diastolic: 77 },
      { date: '01/07', systolic: 120, diastolic: 80 }
    ];

    const weightData = [
      { date: '01/01', weight: 175 },
      { date: '01/02', weight: 174.5 },
      { date: '01/03', weight: 174.8 },
      { date: '01/04', weight: 174.2 },
      { date: '01/05', weight: 174.0 },
      { date: '01/06', weight: 173.8 },
      { date: '01/07', weight: 173.5 }
    ];

    const handleInputChange = (e) => {
      setNewReading({ ...newReading, [e.target.name]: e.target.value });
    };

    const handleSubmitReading = (e) => {
      e.preventDefault();
      // Here you would typically save the reading to a database
      alert('Reading saved successfully!');
      setNewReading({
        heartRate: '',
        bloodPressureSystolic: '',
        bloodPressureDiastolic: '',
        weight: '',
        temperature: '',
        date: new Date().toISOString().split('T')[0],
        time: new Date().toTimeString().slice(0, 5)
      });
    };

    return (
      <div className="p-6 space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Health Tracking</h1>
            <p className="text-gray-600 mt-1">Monitor your vital signs and health metrics</p>
          </div>
          <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
            Export Data
          </button>
        </div>

        {/* Metric Selection Tabs */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex space-x-1 bg-gray-100 rounded-lg p-1 mb-6">
            <button
              onClick={() => setSelectedMetric('heartRate')}
              className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                selectedMetric === 'heartRate'
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-600 hover:text-gray-800'
              }`}
            >
              <Heart className="w-4 h-4 inline mr-2" />
              Heart Rate
            </button>
            <button
              onClick={() => setSelectedMetric('bloodPressure')}
              className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                selectedMetric === 'bloodPressure'
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-600 hover:text-gray-800'
              }`}
            >
              <TrendingUp className="w-4 h-4 inline mr-2" />
              Blood Pressure
            </button>
            <button
              onClick={() => setSelectedMetric('weight')}
              className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                selectedMetric === 'weight'
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-600 hover:text-gray-800'
              }`}
            >
              <BarChart3 className="w-4 h-4 inline mr-2" />
              Weight
            </button>
          </div>

          {/* Chart Display */}
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              {selectedMetric === 'heartRate' && (
                <LineChart data={heartRateData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip formatter={(value) => [`${value} BPM`, 'Heart Rate']} />
                  <Line type="monotone" dataKey="bpm" stroke="#EF4444" strokeWidth={2} />
                </LineChart>
              )}
              {selectedMetric === 'bloodPressure' && (
                <LineChart data={bloodPressureData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Line type="monotone" dataKey="systolic" stroke="#3B82F6" strokeWidth={2} name="Systolic" />
                  <Line type="monotone" dataKey="diastolic" stroke="#10B981" strokeWidth={2} name="Diastolic" />
                </LineChart>
              )}
              {selectedMetric === 'weight' && (
                <LineChart data={weightData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip formatter={(value) => [`${value} lbs`, 'Weight']} />
                  <Line type="monotone" dataKey="weight" stroke="#8B5CF6" strokeWidth={2} />
                </LineChart>
              )}
            </ResponsiveContainer>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Current Stats Cards */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Current Readings</h3>
              <Heart className="w-6 h-6 text-red-500" />
            </div>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Heart Rate</span>
                <span className="font-bold text-gray-900">71 BPM</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Blood Pressure</span>
                <span className="font-bold text-gray-900">120/80</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Weight</span>
                <span className="font-bold text-gray-900">173.5 lbs</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Last Updated</span>
                <span className="text-sm text-gray-500">Today, 7:55 AM</span>
              </div>
            </div>
          </div>

          {/* Add New Reading Form */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Add New Reading</h3>
            <form onSubmit={handleSubmitReading} className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Date</label>
                  <input
                    type="date"
                    name="date"
                    value={newReading.date}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Time</label>
                  <input
                    type="time"
                    name="time"
                    value={newReading.time}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Heart Rate (BPM)</label>
                <input
                  type="number"
                  name="heartRate"
                  value={newReading.heartRate}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="72"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Systolic BP</label>
                  <input
                    type="number"
                    name="bloodPressureSystolic"
                    value={newReading.bloodPressureSystolic}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="120"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Diastolic BP</label>
                  <input
                    type="number"
                    name="bloodPressureDiastolic"
                    value={newReading.bloodPressureDiastolic}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="80"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Weight (lbs)</label>
                <input
                  type="number"
                  step="0.1"
                  name="weight"
                  value={newReading.weight}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="175.0"
                />
              </div>

              <button
                type="submit"
                className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                Save Reading
              </button>
            </form>
          </div>

          {/* Recent Readings History */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Readings</h3>
            <div className="space-y-3">
              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <div>
                  <p className="font-medium text-gray-900">01/07 - 7:55 AM</p>
                  <p className="text-sm text-gray-600">Heart Rate: 71 BPM</p>
                </div>
                <span className="text-green-600 text-sm">Normal</span>
              </div>
              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <div>
                  <p className="font-medium text-gray-900">01/06 - 8:20 AM</p>
                  <p className="text-sm text-gray-600">BP: 117/77 mmHg</p>
                </div>
                <span className="text-green-600 text-sm">Normal</span>
              </div>
              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <div>
                  <p className="font-medium text-gray-900">01/05 - 8:00 AM</p>
                  <p className="text-sm text-gray-600">Weight: 174.0 lbs</p>
                </div>
                <span className="text-blue-600 text-sm">-1.5 lbs</span>
              </div>
              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <div>
                  <p className="font-medium text-gray-900">01/04 - 8:30 AM</p>
                  <p className="text-sm text-gray-600">Heart Rate: 70 BPM</p>
                </div>
                <span className="text-green-600 text-sm">Normal</span>
              </div>
            </div>
            <button className="w-full mt-4 text-blue-600 hover:text-blue-700 text-sm font-medium">
              View All History
            </button>
          </div>
        </div>

        {/* Health Goals Section */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Health Goals</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <Heart className="w-8 h-8 text-red-600" />
              </div>
              <h4 className="font-medium text-gray-900">Heart Rate</h4>
              <p className="text-sm text-gray-600 mt-1">Target: 60-100 BPM</p>
              <div className="mt-2 bg-gray-200 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full" style={{ width: '85%' }}></div>
              </div>
              <p className="text-xs text-gray-500 mt-1">85% within target</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <TrendingUp className="w-8 h-8 text-blue-600" />
              </div>
              <h4 className="font-medium text-gray-900">Blood Pressure</h4>
              <p className="text-sm text-gray-600 mt-1">Target: &lt;120/80 mmHg</p>
              <div className="mt-2 bg-gray-200 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full" style={{ width: '92%' }}></div>
              </div>
              <p className="text-xs text-gray-500 mt-1">92% within target</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <BarChart3 className="w-8 h-8 text-purple-600" />
              </div>
              <h4 className="font-medium text-gray-900">Weight</h4>
              <p className="text-sm text-gray-600 mt-1">Goal: 170 lbs</p>
              <div className="mt-2 bg-gray-200 rounded-full h-2">
                <div className="bg-yellow-500 h-2 rounded-full" style={{ width: '78%' }}></div>
              </div>
              <p className="text-xs text-gray-500 mt-1">3.5 lbs to goal</p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Main render function
  const renderCurrentPage = () => {
    if (!isLoggedIn) {
      switch (currentPage) {
        case 'register':
          return <RegisterPage />;
        case 'forgot-password':
          return <ForgotPasswordPage />;
        default:
          return <LoginPage />;
      }
    }

    return (
      <div className="min-h-screen bg-gray-50 flex">
        <Sidebar />
        <div className="flex-1 lg:ml-0">
          <Header />
          <main className="flex-1">
            {currentPage === 'dashboard' && <Dashboard />}
            {currentPage === 'health' && <HealthTracking />}
            {currentPage === 'appointments' && (
              <div className="p-6">
                <h1 className="text-2xl font-bold text-gray-900">Appointments</h1>
                <p className="text-gray-600 mt-1">Manage your appointments</p>
              </div>
            )}
            {currentPage === 'records' && (
              <div className="p-6">
                <h1 className="text-2xl font-bold text-gray-900">Medical Records</h1>
                <p className="text-gray-600 mt-1">View your medical records</p>
              </div>
            )}
            {currentPage === 'settings' && (
              <div className="p-6">
                <h1 className="text-2xl font-bold text-gray-900">Settings</h1>
                <p className="text-gray-600 mt-1">Manage your account settings</p>
              </div>
            )}
          </main>
        </div>
      </div>
    );
  };

  return renderCurrentPage();
};

export default PatientPortal;
